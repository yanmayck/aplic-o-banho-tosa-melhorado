// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Client {
  id           String        @id @default(cuid())
  name         String
  phone        String?
  email        String?       @unique
  address      String?
  pets         Pet[]
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Pet {
  id            String        @id @default(cuid())
  name          String
  species       String // Ex: "Cachorro", "Gato"
  breed         String?
  birthDate     DateTime?
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  observations  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Groomer {
  id           String        @id @default(cuid())
  name         String
  phone        String?
  email        String?       @unique
  specialties  String[] // e.g., ["Tosa Bebê", "Banho Terapêutico"]
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id                 String                 @id @default(cuid())
  name               String                 @unique
  description        String?
  price              Float
  durationMin        Int // Duração em minutos
  appointmentServices AppointmentService[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model Appointment {
  id           String                 @id @default(cuid())
  dateTime     DateTime
  status       AppointmentStatus      @default(SCHEDULED)
  notes        String?
  totalPrice   Float

  clientId     String
  client       Client                 @relation(fields: [clientId], references: [id])
  petId        String
  pet          Pet                    @relation(fields: [petId], references: [id])
  groomerId    String
  groomer      Groomer                @relation(fields: [groomerId], references: [id])

  appointmentServices AppointmentService[]

  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

// Tabela de junção para Appointment e Service (muitos-para-muitos)
model AppointmentService {
  id            String      @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  serviceId     String
  service       Service     @relation(fields: [serviceId], references: [id])
  priceAtTime   Float // Preço do serviço no momento do agendamento
  quantity      Int         @default(1)

  @@unique([appointmentId, serviceId]) // Garante que um serviço não seja adicionado duas vezes ao mesmo agendamento
  createdAt DateTime @default(now())
}

enum AppointmentStatus {
  SCHEDULED // Agendado
  CONFIRMED // Confirmado pelo cliente/admin
  IN_PROGRESS // Em andamento
  COMPLETED // Concluído
  CANCELLED // Cancelado
  NO_SHOW   // Não compareceu
} 
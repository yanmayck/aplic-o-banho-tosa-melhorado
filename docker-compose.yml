version: '3.8'

services:
  db:
    image: postgres:15-alpine # Usando uma imagem PostgreSQL mais recente
    container_name: furry_friends_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER?ERRO_POSTGRES_USER_NAO_DEFINIDO_NO_ENV}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?ERRO_POSTGRES_PASSWORD_NAO_DEFINIDO_NO_ENV}
      POSTGRES_DB: ${POSTGRES_DB?ERRO_POSTGRES_DB_NAO_DEFINIDO_NO_ENV}
    ports:
      - "${POSTGRES_PORT?ERRO_POSTGRES_PORT_NAO_DEFINIDO_NO_ENV}:5432" # Mapeia a porta do container para o host
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - furry_friends_network

  backend:
    build:
      context: ./furry-friends-agenda-backend # Caminho para o Dockerfile do backend
      dockerfile: Dockerfile
    container_name: furry_friends_backend
    restart: unless-stopped
    depends_on:
      db: # Espera o serviço db estar saudável antes de iniciar
        condition: service_started # Para um healthcheck mais robusto, o db precisaria de um script de healthcheck
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT?ERRO_BACKEND_PORT_NAO_DEFINIDO_NO_ENV}
      DATABASE_URL: ${DATABASE_URL?ERRO_DATABASE_URL_NAO_DEFINIDO_NO_ENV}
      JWT_SECRET: ${JWT_SECRET?ERRO_JWT_SECRET_NAO_DEFINIDO_NO_ENV}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN?ERRO_JWT_EXPIRES_IN_NAO_DEFINIDO_NO_ENV}
      # Prisma specific env var, if needed for migrations in entrypoint script
      # PRISMA_MIGRATE_EXPERIMENTAL: 'true' # Se for usar migrate no entrypoint
    ports:
      - "${BACKEND_PORT?ERRO_BACKEND_PORT_NAO_DEFINIDO_NO_ENV}:${BACKEND_PORT?ERRO_BACKEND_PORT_NAO_DEFINIDO_NO_ENV}"
    volumes:
      # Para desenvolvimento, você poderia montar o código-fonte:
      # - ./furry-friends-agenda-backend/src:/usr/src/app/src
      # - ./furry-friends-agenda-backend/prisma:/usr/src/app/prisma
      # Mas para produção, a imagem já contém o código buildado.
      # Se você tiver uploads de arquivos, precisará de um volume para eles.
      - ./furry-friends-agenda-backend/.env:/usr/src/app/.env # Monta o .env do backend para o Prisma CLI em runtime, se necessário.
                                                            # No entanto, as vars de ambiente já são passadas acima para a aplicação.
                                                            # O ideal é que o Prisma use as vars de ambiente também.
    networks:
      - furry_friends_network
    # Adicionar um entrypoint/comando para rodar migrações automaticamente ao iniciar seria ideal para produção.
    # command: ["sh", "-c", "npx prisma migrate deploy && node dist/main.js"]

networks:
  furry_friends_network:
    driver: bridge

volumes:
  postgres_data: # Volume nomeado para persistir dados do PostgreSQL 